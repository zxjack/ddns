#!/usr/bin/env python
# coding:utf-8
"""
Usage: ddns <provider> [arguments]

Examples:
    ddns aliyun --key KEY --secret SECRET --domain DOMAIN
    ddns cloudflare --email EMAIL --key KEY --domain DOMAIN
    ddns cloudxns --key KEY --secret SECRET --domain DOMAIN
    ddns digitalocean --key KEY --domain DOMAIN
    ddns dnsimple --account-id ACCOUNT_ID --key KEY --domain DOMAIN
    ddns dnspod --email EMAIL --password PASSWORD --domain DOMAIN
    ddns gandi --key KEY --domain DOMAIN
    ddns godaddy --key KEY --secret SECRET --domain DOMAIN
    ddns he --key KEY --domain DOMAIN
    ddns linode --key KEY --domain DOMAIN
    ddns linodev3 --key KEY --domain DOMAIN
    ddns namecheap --password PASSWORD --domain DOMAIN
    ddns namesilo --key KEY --domain DOMAIN
    ddns ns1 --key KEY --domain DOMAIN
    ddns qcloud --secret-id SECRET_ID --secret-key SECRET_KEY --domain DOMAIN
"""

PY2 = '' is not u''
if PY2:
    reload(__import__('sys')).setdefaultencoding('utf-8')

import base64
import collections
import getopt
import hashlib
import hmac
import json
import logging
import os
import random
import re
import socket
import sys
import sys
import threading
import time
import uuid
import xml.etree.ElementTree

if PY2:
    from itertools import izip_longest as zip_longest
    from Queue import Queue
    from urllib import urlencode, quote_plus
    from urllib2 import urlopen, Request, HTTPError
else:
    from itertools import zip_longest
    from queue import Queue
    from urllib.parse import urlencode, quote_plus
    from urllib.request import urlopen, Request, HTTPError

logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.INFO)


def aliyun(key, secret, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    rfc3339 = lambda: time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime())
    sign = lambda p: base64.b64encode(hmac.new((secret+'&').encode(), ('GET&%2F&'+quote_plus(urlencode(sorted(p.items())))).encode(), hashlib.sha1).digest())
    api_url = 'https://alidns.aliyuncs.com/'
    common_params = {'Format': 'json', 'Version': '2015-01-09', 'AccessKeyId': key, 'Timestamp': rfc3339(), 'SignatureMethod': 'HMAC-SHA1', 'SignatureNonce': uuid.uuid4(), 'SignatureVersion': '1.0'}
    params = dict(common_params.items(), Action='DescribeDomainRecords', DomainName=top_domain)
    params['Signature'] = sign(params)
    _, _, info = _request('GET', api_url, params=params, return_json=True)
    record_id = next(x['RecordId'] for x in info['DomainRecords']['Record'] if x['RR'] == record_name)
    logging.info('aliyun domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    params = dict(common_params.items(), Action='UpdateDomainRecord', RecordId=record_id, RR=record_name, Type='A', Value=ip, TTL='600')
    params['Signature'] = sign(params)
    _, _, info = _request('GET', api_url, params=params, return_json=True)
    logging.info('aliyun domain=%r to ip=%r info: %s', domain, ip, info)


def cloudflare(email, key, domain):
    ip = _getip(domain)
    _, zone_name = _split(domain)
    headers = {'X-Auth-Email': email, 'X-Auth-Key': key, 'Content-Type': 'application/json'}
    api_url = 'https://api.cloudflare.com/client/v4/zones?name=%s' % zone_name
    code, _, info = _request('GET', api_url, headers=headers, return_json=True)
    zone_id = info['result'][0]['id']
    logging.info('cloudflare domain=%r to ip=%r zone_id: %s', domain, ip, zone_id)
    api_url = 'https://api.cloudflare.com/client/v4/zones/%s/dns_records?name=%s' % (zone_id, domain)
    _, _, info = _request('GET', api_url, headers=headers, return_json=True)
    record_id = info['result'][0]['id']
    logging.info('cloudflare domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    api_url = 'https://api.cloudflare.com/client/v4/zones/%s/dns_records/%s' % (zone_id, record_id)
    info = {'id': zone_id, 'type': 'A', 'ttl': 300, 'proxied': False, 'name': domain, 'content': ip}
    _, _, info = _request('PUT', api_url, headers=headers, json=info, return_json=True)
    logging.info('cloudflare domain=%r to ip=%r result: %s', domain, ip, info['result'])


def cloudxns(key, secret, domain):
    ip = _getip(domain)
    api_url = 'https://www.cloudxns.net/api2/ddns'
    data = json.dumps({'domain': domain, 'ip': ip, 'line_id': '1'})
    date = time.strftime("%a, %d %b %Y %H:%M:%S +0000", time.gmtime())
    api_hmac = hashlib.md5(''.join((key, api_url, data, date, secret)).encode()).hexdigest()
    headers = {'API-KEY': key, 'API-REQUEST-DATE': date, 'API-HMAC': api_hmac, 'API-FORMAT': 'json'}
    resp = urlopen(Request(api_url, data=data.encode(), headers=headers), timeout=5)
    logging.info('cloudxns domain=%r to ip=%r result: %s', domain, ip, resp.read())


def digitalocean(key, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    headers = {'Authorization': 'Bearer '+key}
    url = 'https://api.digitalocean.com/v2/domains/%s/records' % top_domain
    _, _, info = _request('GET', url, headers=headers, return_json=True)
    record_id = next(x['id'] for x in info['domain_records'] if x['name'] == record_name and x['type'] == 'A')
    logging.info('digitalocean domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    url = 'https://api.digitalocean.com/v2/domains/%s/records/%s' % (top_domain, record_id)
    info = {'type': 'A', 'name': record_name, 'data': ip, 'ttl': '600'}
    _, _, info = _request('PUT', url, headers=headers, json=info, return_json=True)
    logging.info('digitalocean domain=%r to ip=%r result: %s', domain, ip, info)


def dnsimple(account_id, key, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    headers = {'Authorization': 'Bearer '+key, 'Accept': 'application/json'}
    _, _, info = _request('GET', 'https://api.dnsimple.com/v2/whoami', headers=headers, return_json=True)
    account_id = info['data']['id']
    logging.info('dnsimple domain=%r to ip=%r account_id: %s', domain, ip, account_id)
    url = 'https://api.dnsimple.com/v2/%s/zones/%s/records' % (account_id, top_domain)
    _, _, info = _request('GET', url, headers=headers, return_json=True)
    record_id = next(x['id'] for x in info['data'] if x['name'] == record_name and x['type'] == 'A')
    logging.info('dnsimple domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    url = 'https://api.dnsimple.com/v2/%s/zones/%s/records/%s' % (account_id, top_domain, record_id)
    info = {'type': 'A', 'content': ip, 'ttl': '600', 'regions': ['global']}
    _, _, info = _request('PATCH', url, headers=headers, json=info, return_json=True)
    logging.info('dnsimple domain=%r to ip=%r result: %s', domain, ip, info)


def dnspod(email, password, domain):
    ip = _getip(domain)
    record_name, domain = _split(domain)
    params = {'login_email': email, 'login_password': password, 'format': 'json'}
    _, _, info = _request('POST', 'https://dnsapi.cn/Domain.List', params=params, return_json=True)
    domain_id = next(x['id'] for x in info['domains'] if x['punycode'] == domain)
    logging.info('dnspod domain=%r to ip=%r domain_id: %s', domain, ip, domain_id)
    params['domain_id'] = domain_id
    _, _, info = _request('POST', 'https://dnsapi.cn/Record.List', params=params, return_json=True)
    record_id = next(x['id'] for x in info['records'] if x['name'] == record_name and x['type'] == 'A')
    logging.info('dnspod domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    params.update({'record_id':record_id, 'record_type':'A', 'record_line':u'默认', 'value':ip, 'mx':5, 'sub_domain':record_name})
    _, _, info = _request('POST', 'https://dnsapi.cn/Record.Modify', params=params, return_json=True)
    logging.info('dnspod domain=%r to ip=%r info: %s', domain, ip, info)


def gandi(key, domain):
    ip = _getip(domain)
    record_name, zone_name = _split(domain)
    headers = {'X-Api-Key': key, 'Content-Type': 'application/json'}
    api_url = 'https://dns.api.gandi.net/api/v5/zones'
    _, _, info = _request('GET', api_url, headers=headers, return_json=True)
    zone_id = next(x['uuid'] for x in info if x['name'] == zone_name)
    logging.info('gandi domain=%r to ip=%r zone_id: %s', domain, ip, zone_id)
    api_url = 'https://dns.api.gandi.net/api/v5/zones/%s/records/%s/A' % (zone_id, record_name)
    _, _, info = _request('PUT', api_url, json={'rrset_ttl': 300, 'rrset_values': [ip]}, headers=headers)
    logging.info('gandi domain=%r to ip=%r info: %s', domain, ip, info)


def godaddy(key, secret, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    headers = {'Authorization': 'sso-key %s:%s' % (key, secret), 'Content-type': 'application/json'}
    api_url = 'https://api.godaddy.com/v1/domains/%s/records/A/%s' % (top_domain, record_name)
    _, _, info = _request('PUT', api_url, headers=headers, json={'data': ip, 'ttl': '600'}, return_json=True)
    logging.info('godaddy domain=%r to ip=%r info: %s', domain, ip, info)


def he(key, domain):
    ip = _getip(domain)
    params = {'hostname': domain, 'password': key, 'myip': ip}
    _, _, content = _request('GET', 'https://dyn.dns.he.net/nic/update', params=params)
    logging.info('he domain=%r to ip=%r result: %s', domain, ip, content)


def linode(key, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    headers = {'Authorization': 'Bearer '+key}
    _, _, info = _request('GET', 'https://api.linode.com/v4/domains', headers=headers, return_json=True)
    domain_id = next(x['id'] for x in info['data'] if x['domain'] == top_domain)
    logging.info('linode domain=%r to ip=%r domain_id: %s', domain, ip, domain_id)
    _, _, info = _request('GET', 'https://api.linode.com/v4/domains/%s/records' % domain_id, headers=headers, return_json=True)
    record_id = next(x['id'] for x in info['data'] if x['name'] == domain)
    logging.info('linode domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    _, _, info = _request('PUT', 'https://api.linode.com/v4/domains/%s/records/%s' % (domain_id, record_id), headers=headers, json={'name': domain, 'target': ip})
    logging.info('linode domain=%r to ip=%r result: %s', domain, ip, info)


def linodev3(key, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    _, _, info = _request('GET', 'https://api.linode.com/?api_key={}&api_action=domain.list'.format(key), return_json=True)
    domain_id = next(x['DOMAINID'] for x in info['DATA'] if x['DOMAIN'] == top_domain)
    logging.info('linode domain=%r to ip=%r domain_id: %s', domain, ip, domain_id)
    _, _, info = _request('GET', 'https://api.linode.com/?api_key={}&api_action=domain.resource.list&domainid={}'.format(key, domain_id), return_json=True)
    record_id = next(x['RESOURCEID'] for x in info['DATA'] if x['NAME'] == record_name)
    logging.info('linode domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    _, _, info = _request('PUT', 'https://api.linode.com/?api_key={}&api_action=domain.resource.update&domainid={}&resourceid={}&target={}'.format(key, domain_id, record_id, ip), return_json=True)
    logging.info('linode domain=%r to ip=%r result: %s', domain, ip, info)


def ns1(key, domain):
    ip = _getip(domain)
    _, top_domain = _split(domain)
    headers = {'X-NSONE-Key': key}
    url = 'https://api.nsone.net/v1/zones/%s/%s/A' % (top_domain, domain)
    info = {'answers':[{'answer':[ip]}], 'ttl': 600}
    _, _, info = _request('POST', url, headers=headers, json=info, return_json=True)
    logging.info('ns1 domain=%r to ip=%r result: %s', domain, ip, info)


def namecheap(password, domain):
    record_name, top_domain = _split(domain)
    url = 'https://dynamicdns.park-your-domain.com/update'
    params = {'host': record_name, 'domain': top_domain, 'password': password}
    _, _, info = _request('GET', url, params=params)
    logging.info('namecheap domain=%r to ip=%r result: %s', domain, ip, info)


def namesilo(key, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    url = 'https://www.namesilo.com/api/dnsListRecords'
    params = {'version': '1', 'type': 'xml', 'key': key, 'domain': top_domain}
    _, _, tree = _request('GET', url, params=params, return_xml=True)
    record_id = next(x.find('record_id').text for x in tree.find('reply').iter('resource_record') if x.find('host').text == domain and x.find('type').text == 'A')
    logging.info('namesilo domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    url = 'https://www.namesilo.com/api/dnsUpdateRecord'
    params = {'version': '1', 'type': 'xml', 'key': key, 'domain': top_domain, 'rrid': record_id, 'rrvalue': ip, 'rrhost': record_name, 'rrttl': '7207'}
    _, _, info = _request('GET', url, params=params)
    logging.info('namesilo domain=%r to ip=%r result: %s', domain, ip, info)


def qcloud(secret_id, secret_key, domain):
    ip = _getip(domain)
    record_name, top_domain = _split(domain)
    sign = lambda p: base64.b64encode(hmac.new(secret_key.encode(), ('GETcns.api.qcloud.com/v2/index.php?'+urlencode(sorted(p.items()))).encode(), hashlib.sha1).digest())
    api_url = 'https://cns.api.qcloud.com/v2/index.php'
    common_params = {'Region':'sh', 'Timestamp':str(int(time.time())), 'Nonce':str(random.randint(1, 65536)), 'SecretId':secret_id, 'SignatureMethod':'HmacSHA1'}
    params = dict(common_params.items(), Action='RecordList', domain=top_domain, subDomain=record_name)
    params['Signature'] = sign(params)
    _, _, info = _request('GET', api_url, params=params, return_json=True)
    record_id = next(x['id'] for x in info['data']['records'] if x['name'] == record_name and x['line'] == u'默认')
    logging.info('qcloud domain=%r to ip=%r record_id: %s', domain, ip, record_id)
    params = dict(common_params.items(), Action='RecordModify', domain=top_domain, subDomain=record_name, recordId=record_id, recordType='A', recordLine=u'默认', value=ip, ttl='600')
    params['Signature'] = sign(params)
    _, _, info = _request('GET', api_url, params=params, return_json=True)
    logging.info('qcloud domain=%r to ip=%r info: %s', domain, ip, info)


def _getip(domain):
    urls = [
        'http://ip.3322.org',
        'http://whatismyip.akamai.com/',
        'http://checkip.amazonaws.com/',
    ]
    result = Queue()
    def _fetch(url):
        result.put(urlopen(Request(url, headers={'user-agent':'curl/7.53'}), timeout=5))
        logging.info('getip() from %r', url)
    for url in urls:
        t = threading.Thread(target=_fetch, args=(url,))
        t.setDaemon(True)
        t.start()
    text = result.get().read().decode()
    ip = re.search(r'(\d{1,3}.){3}\d{1,3}', text).group()
    if ip == socket.gethostbyname(domain):
        logging.info('remote ip and local ip is same to %s, exit.', ip)
        sys.exit(0)
    return ip


def _request(method, url, params=None, json=None, data=None, headers=None, timeout=None, return_json=False, return_xml=False):
    jsonlib = __import__('json')
    if headers is None:
        headers = {}
    if 'User-Agent' not in headers:
        headers.update({'User-Agent': 'curl/7.53'})
    if params:
        if isinstance(params, dict):
            params = sorted(params.items())
        else:
            params = sorted(params)
        if method == 'GET':
            url += '?' + urlencode(params)
        else:
            data = urlencode(params).encode()
    if json:
        assert method != 'GET'
        data = jsonlib.dumps(json).encode()
        headers.update({'Content-Type': 'application/json'})
    if type(data) is type(u''):
        data = data.encode()
    if timeout is None:
        timeout = 8
    req = Request(url, data=data, headers=headers)
    req.get_method = lambda: method
    logging.info('%s \"%s\"', method, url)
    try:
        resp = urlopen(req, timeout=timeout)
    except HTTPError as e:
        resp = e
    content = resp.read()
    if return_json and resp.code == 200:
        content = jsonlib.loads(content)
    if return_xml and resp.code == 200:
        content = xml.etree.ElementTree.fromstring(content)
    return resp.code, dict(resp.headers), content


def _split(domain):
    """
    .ac .ad .ae .af .ag .ai .al .am .an .ao .ap .aq .ar .as .at .au .aw .ax .az .ba .bb
    .bd .be .bf .bg .bh .bi .bj .bm .bn .bo .br .bs .bt .bv .bw .by .bz .ca .cc .cd .cf
    .cg .ch .ci .ck .cl .cm .cn .co .cr .cs .cu .cv .cx .cy .cz .de .dj .dk .dm .do .dz
    .ec .ee .eg .eh .er .es .et .eu .fi .fj .fk .fm .fo .fr .ga .gb .gd .ge .gf .gg .gh
    .gi .gl .gm .gn .gp .gq .gr .gs .gt .gu .gw .gy .hk .hm .hn .hr .ht .hu .id .ie .il
    .im .in .io .iq .ir .is .it .je .jm .jo .jp .ke .kg .kh .ki .km .kn .kp .kr .kw .ky
    .kz .la .lb .lc .li .lk .lr .ls .lt .lu .lv .ly .ma .mc .md .me .mg .mh .mk .ml .mm
    .mn .mo .mp .mq .mr .ms .mt .mu .mv .mw .mx .my .mz .na .nc .ne .net.id .nf .ng .ni
    .nl .no .np .nr .nu .nz .om .pa .pe .pf .pg .ph .pk .pl .pm .pn .pr .ps .pt .pw .py
    .qa .re .ro .rs .ru .rw .sa .sb .sc .za .sd .se .sg .sh .si .sj .sk .sl .sm .sn .so
    .sr .st .sv .sy .sz .tc .td .tf .tg .th .tj .tk .tl .tm .tn .to .tp .tr .tt .tv .tw
    .tz .ua .ug .uk .um .us .uy .uz .va .vc .ve .vg .vi .vn .vu .wf .ws .ye .yt .yu .za
    .zm .zw

    .art .biz .cat .com .edu .fun .gov .ink .int .kim .ltd .men .mil .net .one .org
    .pro .pub .red .ren .tel .top .vip .web .xin .xyz

    .aero .africa .agency .arpa .asia .audio .cash .click .club .consulting .coop
    .design .engineer .engineering .fishing .graphics .group .guru .host .info .jobs
    .link .live .media .mobi .museum .music .name .network .online .party
    .photography .place .review .science .search .services .shop .site .software
    .solutions .space .store .stream .studio .systems .team .tech .technology .today
    .tools .travel .video .wang .website .wiki .work .works .yokohama

    .4fd.in .4fd.us .a.se .ab.ca .abo.pa .ac.ae .ac.at .ac.cn .ac.cr .ac.cy .ac.fj
    .ac.fk .ac.gn .ac.id .ac.il .ac.in .ac.ir .ac.jp .ac.ke .ac.kr .ac.ma .ac.me
    .ac.mu .ac.mw .ac.mz .ac.ni .ac.nz .ac.om .ac.pa .ac.pr .ac.rs .ac.ru .ac.rw
    .ac.se .ac.sz .ac.th .ac.tj .ac.tz .ac.ug .ac.uk .ac.vn .ac.yu .ac.za .ac.zm
    .ad.jp .adm.br .adv.br .adygeya.ru .aero.mv .aero.tt .agr.br .agric.za
    .agrinet.tn .ah.cn .alt.za .altai.ru .am.br .amur.ru .arkhangelsk.ru .arq.br
    .art.br .art.do .art.dz .art.pl .art.sn .arts.nf .arts.ro .asn.au .asn.lv
    .assn.lk .asso.dz .asso.fr .asso.km .asso.mc .asso.re .astrakhan.ru .ato.br
    .av.tr .b.br .b.se .bashkiria.ru .bbs.tr .bc.ca .bd.se .bel.tr .belau.pw
    .belgorod.ru .bialystok.pl .bio.br .bir.ru .biz.bb .biz.bh .biz.ck .biz.cy
    .biz.et .biz.fj .biz.ki .biz.mv .biz.ng .biz.nr .biz.om .biz.pk .biz.pl .biz.pr
    .biz.tj .biz.tr .biz.tt .biz.ua .biz.vn .bj.cn .bl.uk .blog.br .bmd.br .bourse.za
    .british-library.uk .bryansk.ru .buryatia.ru .busan.kr .bz,com.bz .bz,edu.bz
    .bz,gov.bz .bz,net.bz .bz,org.bz .c.se .cat.tt .cbg.ru .cc.bh .chel.ru
    .chelyabinsk.ru .cherkassy.ua .chernigov.ua .chernovtsy.ua .chita.ru .chita.ru
    .chukotka.ru .chungbuk.kr .chungnam.kr .chuvashia.ru .cim.br .city.za .ck.ua
    .club.tw .cn.ua .cng.br .cnt.br .co.ae .co.ao .co.at .co.ba .co.bb .co.ck .co.cr
    .co.fk .co.gg .co.id .co.il .co.in .co.ir .co.je .co.jp .co.ke .co.kr .co.ma .co.me
    .co.mu .co.mw .co.mz .co.na .co.ni .co.nz .co.om .co.pw .co.rs .co.rw .co.sh .co.st
    .co.sz .co.th .co.tj .co.tt .co.tz .co.ua .co.ug .co.uk .co.ve .co.vi .co.ye .co.yu
    .co.za .co.zm .com.ac .com.af .com.al .com.ar .com.au .com.ba .com.bb .com.bh
    .com.bn .com.bo .com.br .com.bs .com.cn .com.co .com.cy .com.do .com.dz .com.ec
    .com.eg .com.er .com.es .com.et .com.fj .com.fr .com.gh .com.gn .com.gr .com.gt
    .com.gu .com.hk .com.iq .com.jo .com.kh .com.ki .com.km .com.kw .com.ky .com.kz
    .com.lb .com.lk .com.lr .com.lv .com.ly .com.mg .com.mk .com.ml .com.mo .com.mt
    .com.mu .com.mv .com.mw .com.mx .com.my .com.na .com.nf .com.ng .com.ni .com.np
    .com.nr .com.om .com.pa .com.pe .com.ph .com.pk .com.pl .com.pr .com.ps .com.pt
    .com.py .com.qa .com.re .com.ro .com.ru .com.rw .com.sa .com.sb .com.sc .com.sd
    .com.sg .com.sh .com.sl .com.sn .com.st .com.sv .com.sy .com.tj .com.tn .com.tr
    .com.tt .com.tw .com.ua .com.uy .com.ve .com.vi .com.vn .com.ye .com.zm .conf.lv
    .consulado.st .coop.br .coop.km .coop.mv .coop.mw .coop.tt .cq.cn .cr .cri.nz
    .crimea.ua .csiro.au .cv.ua .cybernet.za .cym.uk .d.se .daegu.kr .daejeon.kr
    .dagestan.ru .db.za .de.ki .defense.tn .dn.ua .dnepropetrovsk.ua .dni.us .dnssec.ir
    .donetsk.ua .dp.ua .dr.tr .e-burg.ru .e.se .ebiz.tw .ecape.school.za .ecn.br .ed.ao
    .ed.cr .ed.jp .ed.pw .edu.af .edu.al .edu.ar .edu.au .edu.ba .edu.bb .edu.bh .edu.bn
    .edu.bo .edu.br .edu.bs .edu.ck .edu.cn .edu.co .edu.do .edu.dz .edu.ec .edu.eg
    .edu.er .edu.es .edu.et .edu.gh .edu.gr .edu.gt .edu.gu .edu.hk .edu.in .edu.iq
    .edu.it .edu.jo .edu.kh .edu.ki .edu.km .edu.kn .edu.kw .edu.ky .edu.kz .edu.lb
    .edu.lk .edu.lr .edu.lv .edu.ly .edu.me .edu.mg .edu.mk .edu.ml .edu.mn .edu.mo
    .edu.mt .edu.mv .edu.mw .edu.mx .edu.my .edu.mz .edu.ng .edu.ni .edu.np .edu.nr
    .edu.om .edu.pa .edu.pe .edu.ph .edu.pk .edu.pl .edu.pr .edu.ps .edu.pt .edu.py
    .edu.qa .edu.rs .edu.ru .edu.rw .edu.sa .edu.sb .edu.sc .edu.sd .edu.sg .edu.sh
    .edu.sl .edu.sn .edu.st .edu.sv .edu.sy .edu.tj .edu.tr .edu.tt .edu.tw .edu.ua
    .edu.uy .edu.ve .edu.vn .edu.yu .edu.za .edu.zm .edunet.tn .ekloges.cy .embaixada.st
    .eng.br .ens.tn .ernet.in .es.kr .esp.br .est.pr .etc.br .eti.br .eun.eg .f.se
    .fam.pk .far.br .fed.us .fi.cr .fin.ec .fin.tn .firm.in .firm.nf .firm.ro .fj.cn
    .flog.br .fm.br .fnd.br .fot.br .fr .fs.school.za .fst.br .g.se .g12.br .game.tw
    .gangwon.kr .gd.cn .gda.pl .gdansk.pl .geek.nz .gen.ck .gen.in .gen.nz .gen.tr
    .ggf.br .go.cr .go.id .go.jp .go.ke .go.kr .go.pw .go.th .go.tj .go.tz .go.ug
    .gob.ar .gob.bo .gob.do .gob.es .gob.gt .gob.mx .gob.ni .gob.pa .gob.pe .gob.pk
    .gob.sv .gob.ve .gok.pk .gon.pk .gop.pk .gorzow.pl .gos.pk .gouv.fr .gouv.km
    .gouv.rw .gouv.sn .gov.ac .gov.ae .gov.af .gov.al .gov.ar .gov.ar .gov.au .gov.ba
    .gov.bb .gov.bh .gov.bn .gov.bo .gov.br .gov.bs .gov.ck .gov.cn .gov.co .gov.cy
    .gov.do .gov.dz .gov.ec .gov.eg .gov.er .gov.et .gov.fk .gov.gh .gov.gn .gov.gr
    .gov.gu .gov.hk .gov.il .gov.in .gov.iq .gov.ir .gov.it .gov.jo .gov.kh .gov.ki
    .gov.kn .gov.kw .gov.ky .gov.kz .gov.lb .gov.lk .gov.lr .gov.lv .gov.ly .gov.ma
    .gov.me .gov.mg .gov.mk .gov.ml .gov.mn .gov.mo .gov.mt .gov.mu .gov.mv .gov.mw
    .gov.my .gov.mz .gov.ng .gov.np .gov.nr .gov.om .gov.ph .gov.pk .gov.pl .gov.pr
    .gov.ps .gov.pt .gov.py .gov.qa .gov.rs .gov.ru .gov.rw .gov.sa .gov.sb .gov.sc
    .gov.sd .gov.sg .gov.sh .gov.sl .gov.st .gov.sy .gov.tj .gov.tn .gov.tr .gov.tt
    .gov.tw .gov.ua .gov.uk .gov.vn .gov.ye .gov.yu .gov.za .gov.zm .govt.nz .govt.uk
    .gp.school.za .gr.jp .grondar.za .grozny.ru .grp.lk .gs.cn .gub.uy .gv.ao .gv.at
    .gwangju.kr .gx.cn .gyeongbuk.kr .gyeonggi.kr .gyeongnam.kr .gz.cn .h.se .ha.cn
    .hb.cn .he.cn .health.nz .health.vn .hi.cn .hl.cn .hn.cn .hotel.lk .hs.kr .i.ph
    .i.se .iaccess.za .icnet.uk .id.au .id.ir .id.lv .id.ly .idf.il .idn.sg .idv.hk
    .idv.tw .if.ua .imb.br .imt.za .in .in.rs .in.th .in.ua .inca.za .incheon.kr .ind.br
    .ind.er .ind.gt .ind.in .ind.tn .inf.br .inf.mk .info.bb .info.bh .info.ck .info.ec
    .info.et .info.fj .info.ke .info.ki .info.mv .info.nf .info.nr .info.pl .info.pr
    .info.ro .info.sd .info.tj .info.tn .info.tr .info.tt .info.ve .info.vn .ing.pa
    .int.ar .int.bo .int.lk .int.mv .int.mw .int.pt .int.ru .int.rw .int.tj .int.tt
    .int.vn .intl.tn .iq .ir .irkutsk.ru .isa.us .isla.pr .it.ao .its.me
    .ivano-frankivsk.ua .ivanovo.ru .iwi.nz .izhevsk.ru .jar.ru .jeju.kr .jeonbuk.kr
    .jeonnam.kr .jet.uk .jl.cn .jobs.tt .jor.br .joshkar-ola.ru .js.cn .jus.br .jx.cn
    .k.se .k12.il .k12.tr .k12.vi .kalmykia.ru .kaluga.ru .kamchatka.ru .karelia.ru
    .katowice.pl .kazan.ru .kchr.ru .kemerovo.ru .kg.kr .kh.ua .khabarovsk.ru
    .khakassia.ru .kharkov.ua .kherson.ua .khmelnitskiy.ua .khv.ru .kids.us .kiev.ua
    .kirov.ru .kirovograd.ua .km .km.ua .koenig.ru .komi.ru .kostroma.ru .kr .kr.ua
    .krakow.pl .kranoyarsk.ru .ks.ua .kuban.ru .kurgan.ru .kursk.ru .kv.ua
    .kzn.school.za .l.se .landesign.za .law.za .lea.uk .lel.br .lg.jp .lg.ua .lipetsk.ru
    .ln.cn .lodz.pl .lp.school.za .ltd.cy .ltd.lk .ltd.uk .ltd.ye .lublin.pl .lugansk.ua
    .lutsk.ua .lviv.ua .m.se .ma .magadan.ru .maori.nz .mari-el.ru .mari.ru .marine.ru
    .mat.br .mb.ca .me.ke .me.ua .me.uk .me.ye .med.br .med.ec .med.ly .med.om .med.pa
    .med.sa .med.sd .medecin.km .mi.th .mil.ac .mil.ae .mil.al .mil.ar .mil.ba .mil.bo
    .mil.br .mil.cn .mil.co .mil.do .mil.ec .mil.eg .mil.er .mil.fj .mil.gh .mil.gr
    .mil.gt .mil.id .mil.in .mil.iq .mil.jo .mil.kh .mil.km .mil.kr .mil.kz .mil.lv
    .mil.mg .mil.mv .mil.my .mil.ng .mil.ni .mil.np .mil.nz .mil.om .mil.pe .mil.ph
    .mil.pl .mil.py .mil.qa .mil.ru .mil.rw .mil.st .mil.sy .mil.tj .mil.tt .mil.tw
    .mil.uk .mil.uy .mil.ve .mil.za .mincom.tn .mk.ua .mob.ki .mobi.ke .mobi.ng .mobi.tt
    .mod.uk .mod.uk .mordovia.ru .mosreg.ru .mpm.school.za .ms.kr .msk.ru .muni.il
    .murmansk.ru .mus.br .museum.mv .museum.mw .museum.om .museum.tt .n.se .nalchik.ru
    .name.ae .name.cy .name.eg .name.et .name.fj .name.jo .name.mk .name.mv .name.my
    .name.ng .name.pr .name.tj .name.tr .name.tt .name.vn .nat.tn
    .national-library-scotland.uk .nb.ca .ncape.school.za .ne.jp .ne.ke .ne.kr .ne.pw
    .ne.tz .ne.ug .nel.uk .net.ac .net.ae .net.af .net.al .net.ar .net.au .net.ba
    .net.bb .net.bh .net.bn .net.bo .net.br .net.bs .net.ck .net.cn .net.co .net.cy
    .net.do .net.dz .net.ec .net.eg .net.er .net.et .net.fj .net.fk .net.gg .net.gn
    .net.gr .net.gt .net.gu .net.hk .net.id .net.il .net.in .net.iq .net.ir .net.je
    .net.jo .net.kh .net.ki .net.kn .net.kw .net.ky .net.kz .net.lb .net.lk .net.lr
    .net.lv .net.ly .net.ma .net.me .net.mk .net.ml .net.mo .net.mt .net.mu .net.mv
    .net.mw .net.mx .net.my .net.nf .net.ng .net.ni .net.np .net.nr .net.nz .net.om
    .net.pa .net.pe .net.ph .net.pk .net.pl .net.pr .net.ps .net.pt .net.py .net.qa
    .net.ru .net.rw .net.sa .net.sb .net.sc .net.sd .net.sg .net.sh .net.sl .net.st
    .net.sy .net.th .net.tj .net.tn .net.tr .net.tt .net.tw .net.ua .net.uk .net.uy
    .net.ve .net.vi .net.vn .net.ye .net.za .net.zm .news.sy .nf.ca .ngo.lk .ngo.ph
    .ngo.pl .ngo.za .nhs.uk .nhs.uk .nic.in .nic.in .nic.tj .nic.uk .nikolaev.ua .nis.za
    .nl.ca .nls.uk .nm.cn .nnov.ru .nom.br .nom.co .nom.es .nom.fk .nom.fr .nom.km
    .nom.mg .nom.ni .nom.pa .nom.pe .nom.re .nom.ro .nom.sh .nom.za .nome.pt .not.br
    .notaires.km .nov.ru .novosibirsk.ru .ns.ca .nsk.ru .nsn.us .nt.ca .nt.ro .ntr.br
    .nu.ca .nw.school.za .nx.cn .o.se .od.ua .odessa.ua .odo.br .og.ao .olivetti.za
    .olsztyn.pl .omsk.ru .on.ca .or.at .or.cr .or.id .or.jp .or.ke .or.kr .or.mu .or.pw
    .or.th .or.tz .or.ug .orenburg.ru .org.ac .org.ae .org.af .org.al .org.ar .org.au
    .org.ba .org.bb .org.bh .org.bn .org.bo .org.br .org.bs .org.ck .org.cn .org.co
    .org.cy .org.do .org.dz .org.ec .org.eg .org.er .org.es .org.et .org.fj .org.fk
    .org.gg .org.gh .org.gn .org.gr .org.gt .org.gu .org.hk .org.il .org.in .org.iq
    .org.ir .org.je .org.jo .org.kh .org.ki .org.kn .org.kw .org.ky .org.kz .org.lb
    .org.lk .org.lr .org.lv .org.ly .org.ma .org.me .org.mg .org.mk .org.ml .org.mn
    .org.mo .org.mt .org.mu .org.mv .org.mw .org.mx .org.my .org.mz .org.ng .org.ni
    .org.np .org.nr .org.nz .org.om .org.pa .org.pe .org.ph .org.pk .org.pl .org.pr
    .org.ps .org.pt .org.py .org.qa .org.ro .org.rs .org.ru .org.sa .org.sb .org.sc
    .org.sd .org.se .org.sg .org.sh .org.sl .org.sn .org.st .org.sv .org.sy .org.sz
    .org.tj .org.tn .org.tr .org.tt .org.tw .org.ua .org.ug .org.uk .org.uy .org.ve
    .org.vi .org.vn .org.ye .org.yu .org.za .org.zm .orgn.uk .oryol.ru .other.nf .p.se
    .parliament.cy .parliament.nz .parliament.uk .parliament.uk .parti.se .pb.ao .pe.ca
    .pe.kr .penza.ru .per.kh .per.nf .per.sg .perm.ru .perso.sn .perso.tn .pharmaciens.km
    .pix.za .pl.ua .plc.ly .plc.uk .plc.ye .plo.ps .pol.dz .pol.tr .police.uk .poltava.ua
    .poznan.pl .pp.ru .pp.se .pp.ua .ppg.br .prd.fr .prd.mg .press.cy .press.ma .press.se
    .presse.fr .presse.km .presse.ml .principe.st .priv.me .pro.ae .pro.br .pro.cy
    .pro.ec .pro.fj .pro.mk .pro.mv .pro.om .pro.pr .pro.tt .pro.vn .prof.pr .psc.br
    .psi.br .pskov.ru .ptz.ru .pub.sa .publ.pt .pwr.pl .qc.ca .qh.cn .qsl.br .r.se
    .radom.pl .re.kr .rec.br .rec.nf .rec.ro .red.sv .res.in .rnd.ru .rnrt.tn .rns.tn
    .rnu.tn .rochest.er .rovno.ua .rs.ba .rv.ua .ryazan.ru .s.se .sa.cr .sakhalin.ru
    .samara.ru .saotome.st .saratov.ru .sc.cn .sc.ke .sc.kr .sc.ug .sch.ae .sch.id
    .sch.ir .sch.jo .sch.lk .sch.ly .sch.my .sch.ng .sch.om .sch.sa .sch.uk .sch.zm
    .school.nz .school.za .sci.eg .scot.uk .sd.cn .sebastopol.ua .sec.ps .seoul.kr
    .sh.cn .simbirsk.ru .sk.ca .sld.do .sld.pa .sld.pe .slg.br .slupsk.pl .smolensk.ru
    .sn.cn .soc.lk .soc.uk .spb.ru .srv.br .stavropol.ru .store.bb .store.nf .store.ro
    .store.st .stv.ru .sumy.ua .surgut.ru .sx.cn .szczecin.pl .t.se .tambov.ru
    .tatarstan.ru .te.ua .tel.ki .tel.tr .tel.tt .ternopil.ua .test.tj .tj.cn .tm.cy
    .tm.fr .tm.km .tm.mc .tm.mg .tm.ro .tm.se .tm.za .tmp.br .tom.ru .tomsk.ru .torun.pl
    .tourism.tn .travel.tt .trd.br .tsaritsyn.ru .tsk.ru .tsk.tr .tula.ru .tur.ar .tur.br
    .tuva.ru .tv.bb .tv.bo .tv.br .tv.sd .tv.tr .tver.ru .tw.cn .tyumen.ru .u.se .udm.ru
    .udmurtia.ru .ulan-ude.ru .ulsan.kr .unbi.ba .univ.sn .unmo.ba .unsa.ba .untz.ba
    .unze.ba .uzhgorod.ua .vet.br .veterinaire.km .vinnica.ua .vladikavkaz.ru .vladimir.ru
    .vladivostok.ru .vlog.br .vn.ua .volgograd.ru .vologda.ru .voronezh.ru .vrn.ru
    .vyatka.ru .w.er .w.se .war.net.id .warszawa.pl .waw.pl .wcape.school.za .web.do
    .web.id .web.lk .web.nf .web.pk .web.tj .web.tr .web.ve .web.za .wiki.br .wroc.pl
    .wroclaw.pl .www.ro .x.se .xj.cn .xz.cn .y.se .yakutia.ru .yamal.ru .yekaterinburg.ru
    .yk.ca .yn.cn .yuzhno-sakhalinsk.ru .z.se .zaporizhzhe.ua .zgora.pl .zhitomir.ua
    .zj.cn .zlg.br .zp.ua .zt.ua
    """
    try:
        import publicsuffix
        top = publicsuffix.PublicSuffixList().get_public_suffix(domain)
    except ImportError:
        suffixs = tuple(_split.__doc__.split())
        if domain.endswith(suffixs):
            suffix = max((x for x in suffixs if domain.endswith(x)), key=len)
            top = domain[:-len(suffix)].rsplit('.')[-1] + suffix
            logging.info('python-publicsuffix not found, ddns guess %r as top-level domain', top)
        elif domain.count('.') <= 2:
            top = '.'.join(domain.rsplit('.', 2)[-2:])
            logging.warning('python-publicsuffix not found, ddns guess %r as top-level domain', top)
        else:
            logging.error('cannot guess the top-level domain of %r, please `pip install publicsuffix\'', domain)
            sys.exit(-1)
    record = domain[:-len(top)].strip('.') or '@'
    return record, top


def _main():
    applet = os.path.basename(sys.argv[0])
    funcs = [v for v in globals().values() if type(v) is type(_main) and v.__module__ == '__main__' and not v.__name__.startswith('_')]
    for attr in ['doc', 'defaults', 'code'] if PY2 else []:
        for func in funcs:
            setattr(func, '__'+attr+'__', getattr(func, 'func_'+attr))
    funcs = sorted(funcs, key=lambda x:x.__name__)
    params = collections.OrderedDict((f.__name__, list(zip_longest(f.__code__.co_varnames[:f.__code__.co_argcount][::-1], (f.__defaults__ or [])[::-1]))[::-1]) for f in funcs)
    def usage(applet):
        if applet in ('ddns', 'ddns.py'):
            print('Usage: {0} <provider> [arguments]\n\nExamples:\n{1}\n'.format(applet, '\n'.join('\t{0} {1} {2}'.format(applet, k, ' '.join('--{0} {1}'.format(x.replace('_', '-'), x.upper() if y is None else repr(y)) for (x, y) in v)) for k, v in params.items())))
        else:
            print('\nUsage:\n\t{0} {1}'.format(applet, ' '.join('--{0} {1}'.format(x.replace('_', '-'), x.upper() if y is None else repr(y)) for (x, y) in params[applet])))
    if '-h' in sys.argv or '--help' in sys.argv or (applet in ('ddns', 'ddns.py') and not sys.argv[1:]):
        return usage(applet)
    if applet in ('ddns', 'ddns.py'):
        applet = sys.argv[1]
    for f in funcs:
        if f.__name__ == applet:
            break
    else:
        return usage()
    options = [x.replace('_','-')+'=' for x in f.__code__.co_varnames[:f.__code__.co_argcount]]
    kwargs, _ =  getopt.gnu_getopt(sys.argv[1:], '', options)
    kwargs = dict((k[2:].replace('-', '_'),v) for k, v in kwargs)
    logging.debug('main %s(%s)', f.__name__, kwargs)
    try:
        result = f(**kwargs)
    except TypeError as e:
        patterns = [r'missing \d+ .* argument', r'takes (\w+ )+\d+ argument']
        if any(re.search(x, str(e)) for x in patterns):
            return usage(applet)
        raise
    if type(result) == type(b''):
        result = result.decode().strip()
    if result:
        print(result)


if __name__ == '__main__':
    _main()
